# Title: Probability and Statistics
# Module Code: CA266
# Jane M Horgan


# R IS CASE SENSITIVE: Help or HELP or even help are all different.

# R is also a calculator

6+7*3/2

x = 1:4
x

x2 = x**2
x2

x = 10
prod1 = x*x
prod1

# Objects: The entities that R creates and manipulates, # e.g. variables,arrays,strings, functions.
# Workspace: All objects created in R are stored in workspace

setwd("C:\\Documents and Settings\\SamsungXP\\Belgelerim")

# or equivalently

setwd("C:/Documents and Settings/SamsungXP/Belgelerim")

# in order to see which directory is assigned:

getwd()


# Getting Help
# click the Help button on the toolbar.

help()
help.start()

help(mean)

# is the same with

?mean

demo()
?read.table
help.search ("data.entry")
apropos (boxplot}

"boxplot", "boxplot.default", "boxplot.stat

# Data Entry and Summary
# Entering data from the screen to a vector

downtime =c(0, 1, 2, 12, 12, 14, 18, 21, 21, 23,
24,25,28,29,30,30,30,33,36,44,45,47,51)

# you may need to write an array

sebnem=array(c(1,2,3,4,5,6),dim=c(3,2))

mean(downtime)
median(downtime)
range(downtime)
sd(downtime)

# Data Entry
# Entering data from a file to a data frame


results =read.table ("G:/data/results.txt" , header = T)

# if you don't want to write the directory each time
# you can specify a folder in a specific directory 
# and assign this directory as your work place

setwd("C:/Documents and Settings/SamsungXP/Belgelerim")


# in order to see which directory is assigned:

getwd()

results=read.table(results.txt, header=T)

# You would get an error because the file name must be always written in quotes:

results=read.table("results.txt", header=T)
results

results$arch1[5]

# Alternatively

attach(results)
names(results)

#allows you to access without prefix results.

arch1[5]

# Missing Values

mean(arch1)

# No result because some marks are missing.

# na.rm = T (not available, remove)

or

# na.rm = TRUE

mean(arch1, na.rm = T)
mean(prog1, na.rm = T)
mean(arch2, na.rm = T)
mean(prog2, na.rm = T)

mean(results, na.rm = T)

# Obviously there is no point in getting the mean of "gender", therefore you can specify the columns of the variables that you can actually get the mean for.

mean(results[,2:5], na.rm = T)

median(arch1, na.rm=T)
median(prog1, na.rm=T)
median(arch2, na.rm=T)
median(prog2, na.rm=T)


rangeComp = max(arch1, na.rm=T)-min(arch1, na.rm=T)
rangeEcon= max(prog1, na.rm=T)-min(prog1, na.rm=T)
rangeAnal =max(arch2, na.rm=T)-min(arch2, na.rm=T)
rangeLinA=max(prog2, na.rm=T)-min(prog2, na.rm=T)

rangeComp
rangeEcon
rangeAnal
rangeLinA

# or equivalently


range(arch1,na.rm=T)
range(prog1,na.rm=T)
range(arch2,na.rm=T)
range(prog2,na.rm=T)

sd(results, na.rm=T)

quantile(arch1, na.rm=T)
quantile(prog1, na.rm=T)
quantile(arch2, na.rm=T)
quantile(prog2, na.rm=T)

# Deciles

deciles <-seq(0,1,0.1)
deciles
quantile(arch1, deciles,na.rm=T)

# Percentiles

percentiles <-seq(0,1,0.01)
percentiles
quantile(arch1, percentiles,na.rm=T)

summary(results,na.rm=T)

summary(arch1,na.rm=T)
summary(prog1,na.rm=T)
summary(arch2,na.rm=T)
summary(prog2,na.rm=T)

summary(downtime)

# Graphical Displays: Boxplots

boxplot(downtime)

boxplot(downtime,xlab = "downtime",ylab = "minutes")

# Graphical Displays: Multiple Boxplots

boxplot(arch1, arch2,xlab="Architecture Semesters 1, and 2")

# Graphical Displays: Multiple Boxplots

boxplot(arch1~gender, xlab = "gender", ylab = "Marks (%)",main = "Architecture Semester 1")

# par function

par (mfrow = c(2,2))

boxplot (arch1~gender, main = "Architecture Semester 1")
boxplot(arch2~gender, main = "Architecture Semester 2")
boxplot(prog1~gender, main = "Probability Semester 1")
boxplot(prog2~gender, main = "Probability Semester 2")

par (mfrow = c(1,1)) restores full screen.

# Histograms

hist(arch1, breaks = 5,xlab ="Marks(%)",ylab = "Number of students",
main = "Architecture Semester 1")

hist(prog1, "breaks = 5",xlab ="marks(%)",ylab = "Number of Students",
main = "Architecture Semester 1")

bins <-c(0,40,60,80,100)
hist(arch1, breaks=bins)

par (mfrow = c(2,2))

hist(arch1, xlab = "Architecture",main = " Semester 1", ylim = c(0, 35))
hist(arch2, xlab = "Architecture",main = " Semester 2", ylim = c(0, 35))
hist(prog1, xlab = "Programming",main = " ", ylim = c(0, 35))
hist(prog2, xlab = "Programming",main = " ", ylim = c(0, 35))

# Stem and Leaf

stem(downtime, scale = 2)

stem(prog1)

# Scatter Plots

plot(prog1, prog2,xlab = "Programming, Semester 1",
ylab = "Programming, Semester 2")

# Pairs

pairs(results[2:5])

# First read the data into separate vectors:
x1=c(10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5)
y1=c(8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68)
x2=c(10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5)
y2=c(9.14, 8.14, 8.74, 8.77, 9.26, 8.10, 6.13, 3.10, 9.13, 7.26, 4.74)
x3=c(10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5)
y3=c(7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42,5.73)
x4=c(8, 8, 8, 8, 8, 8, 8, 19, 8, 8, 8)
y4=c(6.58, 5.76, 7.71, 8.84, 8.47, 7.04, 5.25, 12.50, 5.56, 7.91,6.89)

# Calculate the means
mean (data.frame(x1, x2, x3, x4))

mean (data.frame(y1, y2, y3, y4))

# the standard deviations:

sd(data.frame(x1, x2, x3, x4))

sd(data.frame(y1, y2, y3, y4))

# Everything seems the same! But when we plot

par(mfrow = c(2, 2))
plot(x1,y1, xlim=c(0, 20), ylim =c(0, 13))
plot(x2,y2, xlim=c(0, 20), ylim =c(0, 13))
plot(x3,y3, xlim=c(0, 20), ylim =c(0, 13))
plot(x4,y4, xlim=c(0, 20), ylim =c(0, 13))

# Everything seems different!


# ctrl+L clears the screen....